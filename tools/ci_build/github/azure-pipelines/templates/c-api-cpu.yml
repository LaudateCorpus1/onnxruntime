parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: PublishingNuget
  displayName: Publishing Nuget Packages and report binary size to mysql
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

- name: BuildVariant
  type: string
  default: 'openmp'

jobs:
- job: NuGet_Packaging_CPU
  workspace:
    clean: all
  pool: 'Win-CPU-2021'
  variables:
    OrtPackageId: ${{ parameters.OrtNugetPackageId }}
    breakCodesignValidationInjection: ${{ parameters.DoEsrp }}
  condition: succeeded()
  steps:
  - checkout: self
    submodules: true
  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-x64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-x86'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-arm64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-win-arm'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-osx'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-linux-x64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'onnxruntime-linux-aarch64'
      targetPath: '$(Build.BinariesDirectory)/nuget-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - NuGet'
    inputs:
      artifactName: 'drop-extra'
      targetPath: '$(Build.BinariesDirectory)/extra-artifact'
      buildType: specific
      project: '530acbc4-21bc-487d-8cd8-348ff451d2ff'
      definition: 940
      buildVersionToDownload: specific
      pipelineId: 170521

  #Reconstruct the build dir
  - task: PowerShell@2
    displayName: 'PowerShell Script'
    inputs:
      targetType: filePath
      filePath: $(Build.SourcesDirectory)\tools\ci_build\github\windows\extract_nuget_files.ps1

  - script: |
     dir
    workingDirectory: '$(Build.BinariesDirectory)/nuget-artifact'
    displayName: 'List artifacts'

  - script: |
     mklink /D /J models C:\local\models
    workingDirectory: '$(Build.BinariesDirectory)'
    displayName: 'Create models link'

  - task: NuGetToolInstaller@0
    displayName: Use Nuget 5.7.0
    inputs:
      versionSpec: 5.7.0

  - task: DotNetCoreCLI@2
    displayName: 'Restore nuget packages'
    inputs:
      command: restore
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: DotNetCoreCLI@2
    displayName: 'Build C#'
    inputs:
      command: build
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - template: win-esrp-dll.yml
    parameters:
      FolderPath: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
      DisplayName: 'ESRP - Sign C# dlls'
      DoEsrp: ${{ parameters.DoEsrp }}

  - task: DotNetCoreCLI@2
    displayName: 'Build Nuget Packages'
    inputs:
      command: build
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.proj'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -t:CreatePackage -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId) -p:IsReleaseBuild=${{ parameters.IsReleaseBuild }}'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: BatchScript@1
    displayName: 'Bundle Native NuGet and other binaries'
    inputs:
      filename: $(Build.SourcesDirectory)\tools\ci_build\github\windows\bundle_dlls.bat
      workingFolder: $(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts

  - task: CopyFiles@2
    displayName: 'Copy nuget packages to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.BinariesDirectory)\RelWithDebInfo\RelWithDebInfo\nuget-artifacts'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: CopyFiles@2
    displayName: 'Copy nuget packages to: $(Build.ArtifactStagingDirectory)'
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)\csharp\src\Microsoft.ML.OnnxRuntime\bin\RelWithDebInfo'
      Contents: '*.nupkg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'

  - template: esrp_nuget.yml
    parameters:
      DisplayName: 'ESRP - sign NuGet package'
      FolderPath: '$(Build.ArtifactStagingDirectory)'
      DoEsrp: ${{ parameters.DoEsrp }}

  - template: validate-nuget.yml
    parameters:
      NugetPath: '$(Build.ArtifactStagingDirectory)'
      NugetPackage: 'Microsoft.ML.OnnxRuntime.*nupkg'
      PlatformsSupported: 'win-x64,win-x86,linux-x64,linux-aarch64,osx.10.14-x64'
      VerifyNugetSigning: false

  - task: PublishPipelineArtifact@0
    displayName: 'Publish Pipeline NuGet Artifact'
    inputs:
      artifactName: 'drop-signed-nuget-CPU'
      targetPath: '$(Build.ArtifactStagingDirectory)'

  - powershell: |
     $counter = 0
     Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/*.nupkg | foreach {7z x -y -o$counter $_.fullname;$counter++}
    workingDirectory: '$(Build.ArtifactStagingDirectory)'
    displayName: 'Unzip files to sanitize the PE files'

  - task: DotNetCoreCLI@2
    displayName: 'Build C#'
    inputs:
      command: custom
      custom: clean
      projects: '$(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln'
      configuration: RelWithDebInfo
      arguments: '--configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
      workingDirectory: '$(Build.SourcesDirectory)\csharp'

  - task: BinSkim@4
    displayName: 'Run BinSkim'
    inputs:
      AnalyzeTargetGlob: '$(Build.ArtifactStagingDirectory)\**.dll;$(Build.ArtifactStagingDirectory)\**.exe;$(Build.ArtifactStagingDirectory)\**.so'

  - task: RoslynAnalyzers@2
    displayName: 'Run Roslyn Analyzers'
    inputs:
      userProvideBuildInfo: msBuildInfo
      msBuildArchitecture: DotNetCore
      msBuildCommandline: '"C:\Program Files\dotnet\dotnet.exe" build $(Build.SourcesDirectory)\csharp\OnnxRuntime.CSharp.sln --configuration RelWithDebInfo -p:Platform="Any CPU" -p:OnnxRuntimeBuildDirectory="$(Build.BinariesDirectory)" -p:OrtPackageId=$(OrtPackageId)'
    condition: and(succeeded(), eq('${{ parameters.DoCompliance }}', true))

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()


- template: ../nuget/templates/test_win.yml
  parameters:
    AgentPool : 'Win-CPU-2021'
    Skipx86Tests : false
    NugetPackageName : 'Microsoft.ML.OnnxRuntime'
    ArtifactSuffix: 'CPU'

- template: ../nuget/templates/test_linux.yml
  parameters:
    AgentPool : Linux-CPU
    NugetPackageName : 'Microsoft.ML.OnnxRuntime'
    ArtifactSuffix: 'CPU'

- template: ../nuget/templates/test_macos.yml
  parameters:
    AgentPool : macOS-10.15
    ArtifactSuffix: 'CPU'

- job: Publish_NuGet_Package_And_Report
  workspace:
    clean: all
  variables:
  - name: GDN_CODESIGN_TARGETDIRECTORY
    value: '$(Build.BinariesDirectory)/nuget-artifact/final-package'
  pool: 'Win-CPU-2021'
  # TODO: uncomment this after testing
  #condition: and (succeeded(), and (${{ parameters.PublishingNuget }}, eq(variables['Build.SourceBranch'], 'refs/heads/master')))
  dependsOn:
  - NuGet_Test_Win_CPU
  - NuGet_Test_Linux_CPU
  - NuGet_Test_MacOS
  steps:
  - checkout: self
    submodules: false
  - template: set-version-number-variables-step.yml

  - task: DownloadPipelineArtifact@0
    displayName: 'Download Pipeline Artifact - Signed NuGet Package'
    inputs:
      artifactName: 'drop-signed-nuget-CPU'
      targetPath: $(Build.BinariesDirectory)/nuget-artifact/final-package

  - template: ../nuget/templates/get-nuget-package-version-as-variable.yml
    parameters:
      packageFolder: '$(Build.BinariesDirectory)/nuget-artifact/final-package'

  - task: CmdLine@2
    displayName: 'Post binary sizes to the dashboard database using command line'
    inputs:
      script: |
          python.exe -m pip install azure-kusto-data[pandas] azure-kusto-ingest[pandas]
          echo changing directory to artifact download path
          cd $(Build.BinariesDirectory)/nuget-artifact/final-package
          echo processing nupkg
          SETLOCAL EnableDelayedExpansion   
          FOR /R %%i IN (*.nupkg) do (
           set filename=%%~ni
           IF NOT "!filename:~25,7!"=="Managed" (
            echo processing %%~ni.nupkg
            copy %%~ni.nupkg %%~ni.zip
            echo copied to zip
            echo listing lib files in the zip 
            REM use a single .csv file to put the data 
            echo os,arch,build_config,size > $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\linux-x64\native\libonnxruntime.so | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo linux,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\linux-aarch64\native\libonnxruntime.so | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo linux,aarch64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\osx.10.14-x64\native\libonnxruntime.dylib | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo osx,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\win-x64\native\onnxruntime.dll | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo win,x64,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt
            7z.exe l -slt %%~ni.zip runtimes\win-x86\native\onnxruntime.dll | findstr /R /C:"^Size = [0-9]*" | for /F "tokens=3" %%a  in ('more') do if not "%%a" == "" echo win,x86,${{ parameters.buildVariant }},%%a >> $(Build.BinariesDirectory)\binary_size_data.txt            
             )
           ) 
  - task: AzureCLI@2
    displayName: 'Azure CLI'
    inputs:
      azureSubscription: AIInfraBuildOnnxRuntimeOSS
      scriptLocation: inlineScript
      scriptType: batch
      inlineScript: |
        python.exe $(Build.SourcesDirectory)\tools\ci_build\github\windows\post_binary_sizes_to_dashboard.py --commit_hash=$(Build.SourceVersion) --size_data_file=binary_size_data.txt --build_project=Lotus --build_id=$(Build.BuildId)
      workingDirectory: '$(Build.BinariesDirectory)'


  - task: PowerShell@2
    displayName: 'Get Current Date'
    inputs:
      targetType: 'inline'
      script: |
          $date = $(Get-Date -Format "yyyy-MM-dd")
          Write-Host "##vso[task.setvariable variable=CurrentDate]$date"

  - task: AzureFileCopy@3
    displayName: 'Copy Signed Native NuGet Package to Blob Store'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      sourcePath: '$(Build.BinariesDirectory)/nuget-artifact/final-package/${{ parameters.OrtNugetPackageId }}.$(NuGetPackageVersionNumber).nupkg'
      azureSubscription: 'AIInfraBuildOnnxRuntimeOSS'
      destination: azureBlob
      storage: ortpackages
      containerName: ortpackages
      blobPrefix: '$(CurrentDate)/'
    continueOnError: true

  - task: AzureFileCopy@3
    displayName: 'Copy Signed Managed NuGet Package to Blob Store'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      sourcePath: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      azureSubscription: 'AIInfraBuildOnnxRuntimeOSS'
      destination: azureBlob
      storage: ortpackages
      containerName: ortpackages
      blobPrefix: '$(CurrentDate)/'
    continueOnError: true

  - task: DotNetCoreCLI@2
    displayName: 'Copy Signed Native NuGet Package to Internal NuGet Feed'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      searchPatternPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/${{ parameters.OrtNugetPackageId }}.$(NuGetPackageVersionNumber).nupkg'
      feedPublish: 'OnnxRuntime'

  - task: DotNetCoreCLI@2
    displayName: 'Copy Signed Managed NuGet Package to Internal NuGet Feed'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      searchPatternPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      feedPublish: 'OnnxRuntime'

  - task: NuGetCommand@2
    displayName: 'Copy Signed Native NuGet Package to ORT-NIGHTLY'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      packagesToPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/${{ parameters.OrtNugetPackageId }}.$(NuGetPackageVersionNumber).nupkg'
      publishVstsFeed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/7982ae20-ed19-4a35-a362-a96ac99897b7'

  - task: NuGetCommand@2
    displayName: 'Copy Signed Managed NuGet Package to ORT-NIGHTLY'
    condition: ne(variables['IsReleaseBuild'], 'true') # release build has a different package naming scheme
    inputs:
      command: 'push'
      packagesToPush: '$(Build.BinariesDirectory)/nuget-artifact/final-package/Microsoft.ML.OnnxRuntime.Managed.$(NuGetPackageVersionNumber).nupkg'
      publishVstsFeed: '2692857e-05ef-43b4-ba9c-ccf1c22c437c/7982ae20-ed19-4a35-a362-a96ac99897b7'

  - template: component-governance-component-detection-steps.yml
    parameters :
      condition : 'succeeded'
  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: 'Clean Agent Directories'
    condition: always()
